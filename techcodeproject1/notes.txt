Creating a web-based system that offers multi-payment options involves several steps, from planning and development to integration and testing. 
Here's a general outline of the process:

1. **Define Your Requirements:**
   Identify the types of payments you want to support (credit cards, digital wallets, bank transfers, etc.) and the regions where your system will be used. Understand the user experience and how payments will fit into your overall system.

2. **Choose a Technology Stack:**
   Decide on the programming languages, frameworks, and tools you'll use to build the web-based system. Common choices include HTML/CSS for the front-end, and languages like Python, Ruby, PHP, or JavaScript for the back-end. For payment integration, you might need APIs or SDKs provided by payment service providers.

3. **Select Payment Gateways:**
   Research and choose one or more payment gateways that support the payment methods you want to offer. Some popular options include PayPal, Stripe, Square, Braintree, and Authorize.Net. Each gateway has its own documentation and APIs for integration.

4. **Design the User Interface:**
   Design a user-friendly interface for your web-based system, including the payment process.
   The design should be responsive and accessible across different devices.

5. **Implement User Authentication and Security:**
   Implement user authentication and authorization to secure user accounts and payment data. 
   Use encryption (SSL/TLS) to secure data transmission between the user's browser and your server.

6. **Integrate Payment Gateways:**
   Follow the documentation of your chosen payment gateways to integrate their APIs into your system. 
   This usually involves making API requests to initiate payments, handling responses, and updating the payment status in your database.

7. **Develop a Backend:**
   Set up a back-end server to handle requests from the front-end, manage user accounts, and process payments. 
   This server should also communicate with the payment gateways.

8. **Handle Payment Callbacks:**
   Payment gateways often send callbacks or webhooks to notify your system about payment events (successful payment, failed payment, etc.). 
   Implement callback handling to update your system's database and notify users.

9. **Test and QA:**
   Thoroughly test your payment system in various scenarios to ensure it works as expected. 
   Test different payment methods, currencies, and edge cases to catch any potential issues.

10. **User Testing:**
    Conduct user testing to gather feedback on the payment process and user experience. 
    Make any necessary adjustments based on the feedback received.

11. **Compliance and Legal Considerations:**
    Ensure your system complies with relevant regulations, such as data protection laws (GDPR, CCPA), and payment industry standards (PCI DSS).

12. **Launch and Monitor:**
    Deploy your web-based system to a production environment and monitor it closely after launch.
    Monitor payment success rates, user interactions, and any issues that arise.

13. **Continuous Improvement:**
    Continuously gather user feedback and monitor the system's performance. 
    Regularly update the system to improve the user experience and add new features.

Remember that payment processing can involve sensitive financial and personal data, sso security is paramount. 
It's a good idea to consult with legal and security experts if you're unsure about compliance or best practices.